#ifndef __VIM_COMM_GPIO_H__
#define __VIM_COMM_GPIO_H__

#include "vim_type.h"
#include "vim_errno.h"
#include "vim_debug.h"

#ifdef __cplusplus
#if __cplusplus
extern "C" {
#endif
#endif /* End of #ifdef __cplusplus */

//guoying modified according VC0768_REG_PADC_V0.8.xls 04/01/2020

enum GPIO_ID
{

	AID_GPIO_ID_A0 = 0,
	AID_GPIO_ID_A1,
	AID_GPIO_ID_A2,
	AID_GPIO_ID_A3,
	AID_GPIO_ID_A4,
	AID_GPIO_ID_A5,
	AID_GPIO_ID_A6,	
	AID_GPIO_ID_A7,
	AID_GPIO_ID_A8,
	AID_GPIO_ID_A9,
	AID_GPIO_ID_A10,
	AID_GPIO_ID_A11,
	AID_GPIO_ID_A12,
	AID_GPIO_ID_A13,
	AID_GPIO_ID_A14,
	AID_GPIO_ID_A15,
	AID_GPIO_ID_A16,

	AID_GPIO_ID_B0,
	AID_GPIO_ID_B1,
	AID_GPIO_ID_B2,
	AID_GPIO_ID_B3,
	AID_GPIO_ID_B4,
	AID_GPIO_ID_B5,
	AID_GPIO_ID_B6,	
	AID_GPIO_ID_B7,
	AID_GPIO_ID_B8,
	AID_GPIO_ID_B9,
	AID_GPIO_ID_B10,
	AID_GPIO_ID_B11,
	AID_GPIO_ID_B12,
	AID_GPIO_ID_B13,
	AID_GPIO_ID_B14,
	AID_GPIO_ID_B15,
	AID_GPIO_ID_B16,
	AID_GPIO_ID_B17,   
	AID_GPIO_ID_B18,   
	AID_GPIO_ID_B19,   
	AID_GPIO_ID_B20, 
	AID_GPIO_ID_B21, 
	AID_GPIO_ID_B22, 
	AID_GPIO_ID_B23, 
	AID_GPIO_ID_B24, 
	AID_GPIO_ID_B25, 
	AID_GPIO_ID_B26,	
	AID_GPIO_ID_B27, 
	AID_GPIO_ID_B28, 
	AID_GPIO_ID_B29, 
	AID_GPIO_ID_B30,
	AID_GPIO_ID_B31,
	AID_GPIO_ID_B32,
	AID_GPIO_ID_B33,
	AID_GPIO_ID_B34,
	AID_GPIO_ID_B35,
	AID_GPIO_ID_B36,
	AID_GPIO_ID_B37,
	AID_GPIO_ID_B38,	//vc0768 add B38~B41
	AID_GPIO_ID_B39,
	AID_GPIO_ID_B40,
	AID_GPIO_ID_B41,
	

	AID_GPIO_ID_C0,
	AID_GPIO_ID_C1,
	AID_GPIO_ID_C2,
	AID_GPIO_ID_C3,
	AID_GPIO_ID_C4,
	AID_GPIO_ID_C5,
	AID_GPIO_ID_C6,	
	AID_GPIO_ID_C7,
	AID_GPIO_ID_C8,
	AID_GPIO_ID_C9,
	AID_GPIO_ID_C10,
	AID_GPIO_ID_C11,
	AID_GPIO_ID_C12,
	AID_GPIO_ID_C13,
	AID_GPIO_ID_C14,
	AID_GPIO_ID_C15,
	AID_GPIO_ID_C16,
	AID_GPIO_ID_C17,   
	AID_GPIO_ID_C18,   
	AID_GPIO_ID_C19,  
	AID_GPIO_ID_C20,
	AID_GPIO_ID_C21,
	AID_GPIO_ID_C22,
	AID_GPIO_ID_C23,   
	AID_GPIO_ID_C24,   
	AID_GPIO_ID_C25,   	
	AID_GPIO_ID_C26,   
	AID_GPIO_ID_C27,  

	AID_GPIO_ID_D0,
	AID_GPIO_ID_D1,
	AID_GPIO_ID_D2,
	AID_GPIO_ID_D3,
	AID_GPIO_ID_D4,
	AID_GPIO_ID_D5,
	AID_GPIO_ID_D6,
	AID_GPIO_ID_D7,
	AID_GPIO_ID_D8,

	AID_GPIO_ID_E0,
	AID_GPIO_ID_E1,
	AID_GPIO_ID_E2,
	AID_GPIO_ID_E3,
	AID_GPIO_ID_E4,
	AID_GPIO_ID_E5,
	AID_GPIO_ID_E6,	
	AID_GPIO_ID_E7,
	AID_GPIO_ID_E8,
	AID_GPIO_ID_E9,
	AID_GPIO_ID_E10,
	AID_GPIO_ID_E11,
	AID_GPIO_ID_E12,
	AID_GPIO_ID_E13,
	AID_GPIO_ID_E14,
	AID_GPIO_ID_E15,
	AID_GPIO_ID_E16,
	AID_GPIO_ID_E17,   
	AID_GPIO_ID_E18,   
	AID_GPIO_ID_E19,   
	AID_GPIO_ID_E20, 
	AID_GPIO_ID_E21, 
	AID_GPIO_ID_E22, 
	AID_GPIO_ID_E23, 
	AID_GPIO_ID_E24, 
	AID_GPIO_ID_E25, 
	AID_GPIO_ID_E26,	
	AID_GPIO_ID_E27, 
	AID_GPIO_ID_E28, 
	AID_GPIO_ID_E29, 

  	AID_GPIO_ID_G0,    
	AID_GPIO_ID_G1,    
	AID_GPIO_ID_G2,    
	AID_GPIO_ID_G3,    
	AID_GPIO_ID_G4,    
	AID_GPIO_ID_G5,    
	AID_GPIO_ID_G6,	   
	AID_GPIO_ID_G7,    
	AID_GPIO_ID_G8,    
	AID_GPIO_ID_G9,    

	
  	AID_GPIO_ID_H0,    	            
	AID_GPIO_ID_H1,      
	AID_GPIO_ID_H2,      
	AID_GPIO_ID_H3,      
	AID_GPIO_ID_H4,      
	AID_GPIO_ID_H5,      
	AID_GPIO_ID_H6,	     
	AID_GPIO_ID_H7,      
	AID_GPIO_ID_H8,      
	AID_GPIO_ID_H9,      
	AID_GPIO_ID_H10,     
	AID_GPIO_ID_H11,     
	AID_GPIO_ID_H12,     
	AID_GPIO_ID_H13,     
	AID_GPIO_ID_H14,   
	AID_GPIO_ID_H15,	 

	AID_GPIO_ID_I0,
	AID_GPIO_ID_I1,
	AID_GPIO_ID_I2,
	AID_GPIO_ID_I3,
	AID_GPIO_ID_I4,
	AID_GPIO_ID_I5,
	AID_GPIO_ID_I6,	
	AID_GPIO_ID_I7,
	AID_GPIO_ID_I8,
	AID_GPIO_ID_I9,
	AID_GPIO_ID_I10,
	AID_GPIO_ID_I11,
	AID_GPIO_ID_I12,
	AID_GPIO_ID_I13,


	GPIO_NUM
};

#ifdef CONFIG_POLARIS_BD_ZYNQ
enum FUN_GPIO       //zync gpio pin
{
        FUNCTION_SNR_RESET_PIN = AID_GPIO_ID_B10,
        FUNCTION_SNR_PWDN_PIN = AID_GPIO_ID_B9,
        FUNCTION_DEV_PWDN_PIN = AID_GPIO_ID_G7, //sensor 外设板上电 

        FUNCTION_AF_RESET_PIN = AID_GPIO_ID_G8, //af reset 
        FUNCTION_AF_VD_FZ_PIN = AID_GPIO_ID_G3, //af 缩放 
        FUNCTION_AF_VD_IRIS_1_PIN = AID_GPIO_ID_E8,  //af 自动光圈 保留
        FUNCTION_AF_VD_IRIS_2_PIN = AID_GPIO_ID_G4,  //af 自动光圈 保留   
        FUNCTION_AF_VD_IRIS_3_PIN = AID_GPIO_ID_G9,  //af 自动光圈 保留  

        FUNCTION_IRCUT_CTRL_PIN = AID_GPIO_ID_E20, //ircut ctrl

};
#elif CONFIG_POLARIS_BD_VC0768
enum FUN_GPIO
{
        FUNCTION_SNR_RESET_PIN = AID_GPIO_ID_B10,
        FUNCTION_SNR_PWDN_PIN = AID_GPIO_ID_B9,
        FUNCTION_DEV_PWDN_PIN = AID_GPIO_ID_G7, //sensor 外设板上电 
                
        FUNCTION_AF_RESET_PIN = AID_GPIO_ID_G8, //af reset 
        FUNCTION_AF_VD_FZ_PIN = AID_GPIO_ID_G3, //af 缩放 
        FUNCTION_AF_VD_IRIS_1_PIN = AID_GPIO_ID_E8,  //af 自动光圈 保留
        FUNCTION_AF_VD_IRIS_2_PIN = AID_GPIO_ID_G4,  //af 自动光圈 保留   
        FUNCTION_AF_VD_IRIS_3_PIN = AID_GPIO_ID_G9,  //af 自动光圈 保留  

        FUNCTION_IRCUT_CTRL_PIN = AID_GPIO_ID_E20, //ircut ctrl
};
#endif 
/*
enum FUN_GPIO
{
        FUNCTION_SNR_RESET_PIN = AID_GPIO_ID_B10,
        FUNCTION_SNR_PWDN_PIN = AID_GPIO_ID_B9,
                
};
*/

enum GPIO_PAD_MODE
{
	PAD_FUNC0 = 0,
	PAD_FUNC1,
	PAD_FUNC2,
	PAD_GPIO =3		
};

enum GPIO_DIR
{
	GPIO_DIRECTION_OUT=0,
	GPIO_DIRECTION_IN 		
};

enum GPIO_STATUS
{
	GPIO_LOW = 0,
	GPIO_HIGH
};

enum GPIO_DRIVE
{
	GPIO_DRIVE_LOW = 0,
	GPIO_DRIVE_STRONG
};

enum GPIO_PULL
{
	PAD_PULL_DOWN = 0,
	PAD_PULL_UP,
	PAD_PULL_OFF
};

typedef enum vimGPIO_ERR_CODE_E
{
	ERR_GPIO_PIN_ID = 0x100,		
	ERR_GPIO_REQUEST_IRQ,		
	ERR_GPIO_FREE_IRQ ,		
	ERR_GPIO_REQUEST_GPIO,		
	ERR_GPIO_FREE_GPIO ,	
	ERR_GPIO_ARGUMENT,	
	ERR_GPIO_DRV_UNREGIST,
	ERR_GPIO_IOC_COMMAND,		
} GPIO_ERR_CODE_E;

#define IRQF_TRIGGER_RISING		0x00000001  /* ÉÏÉýÑØ´¥·¢ÖÐ¶Ï */
#define IRQF_TRIGGER_FALLING		0x00000002
#define IRQF_TRIGGER_HIGH			0x00000004
#define IRQF_TRIGGER_LOW				0x00000008

typedef void gpiopin_user_callback(VIM_S32 pin_status);

#define VIM_ERR_GPIO_INVALID_CMD          VIM_DEF_ERR(VIM_ID_GPIO, EN_ERR_LEVEL_ERROR, ERR_GPIO_IOC_COMMAND)
#define VIM_ERR_GPIO_DRV_UNREGISTE		VIM_DEF_ERR(VIM_ID_GPIO, EN_ERR_LEVEL_ERROR, ERR_GPIO_DRV_UNREGIST)
#define VIM_ERR_GPIO_INVALID_PINID		VIM_DEF_ERR(VIM_ID_GPIO, EN_ERR_LEVEL_ERROR, ERR_GPIO_PIN_ID)
#define VIM_ERR_GPIO_REQUEST_IRQ 			VIM_DEF_ERR(VIM_ID_GPIO, EN_ERR_LEVEL_ERROR, ERR_GPIO_REQUEST_IRQ )
#define VIM_ERR_GPIO_FREE_IRQ 					VIM_DEF_ERR(VIM_ID_GPIO, EN_ERR_LEVEL_ERROR, ERR_GPIO_FREE_IRQ )
#define VIM_ERR_GPIO_REQUEST_GPIO			VIM_DEF_ERR(VIM_ID_GPIO, EN_ERR_LEVEL_ERROR, ERR_GPIO_REQUEST_GPIO)
#define VIM_ERR_GPIO_FREE_GPIO				VIM_DEF_ERR(VIM_ID_GPIO, EN_ERR_LEVEL_ERROR, ERR_GPIO_FREE_GPIO)

VIM_S32 VIM_GPIO_SetPull(enum GPIO_ID pin, enum GPIO_PULL pull);
VIM_S32 VIM_GPIO_SelectDrive(enum GPIO_ID pin, enum GPIO_DRIVE drive);
VIM_S32 VIM_GPIO_SetFunction(enum GPIO_ID pin, enum GPIO_PAD_MODE mod);
VIM_S32 VIM_GPIO_SetDirection(enum GPIO_ID pin, enum GPIO_DIR dir);
VIM_S32 VIM_GPIO_GetValue(enum GPIO_ID pin, VIM_U32* value);
VIM_S32 VIM_GPIO_SetValue(enum GPIO_ID pin, enum GPIO_STATUS value);
VIM_S32 VIM_GPIO_Request(enum GPIO_ID pin);
VIM_S32 VIM_GPIO_Free(enum GPIO_ID pin);
VIM_S32 VIM_GPIO_RequestIRQ(enum GPIO_ID pin, VIM_U32 irq_type, gpiopin_user_callback *user_callback);
VIM_S32 VIM_GPIO_FreeIRQ(enum GPIO_ID pin);
VIM_S32 VIM_GPID_RequestByFunction(enum FUN_GPIO function_pin , VIM_U32* gpio_function);



#ifdef __cplusplus
#if __cplusplus
}
#endif
#endif /* __cplusplus */

#endif  /* __VIM_COMM_GPIO_H__ */
